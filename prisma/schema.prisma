// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  firstName    String   @db.VarChar(50)
  lastName     String   @db.VarChar(50)
  description  String?  @db.VarChar(250)
  email        String   @unique @db.VarChar(250)
  phone        String   @unique @db.VarChar(20)
  password     String   @db.VarChar(250)
  stripeUserId String?
  picturePath  String   @db.VarChar(150)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  roleId       String?  @db.Uuid

  role                 Role?                 @relation(fields: [roleId], references: [id])
  addresses            Address[]
  preference           Preference?
  requests             Request[]
  feedbacks            FeedBack[]
  feedbackApplications FeedBackApplication[]
  issues               Issue[]
  objects              ObjectModel[]
  skills               SkillsOnUsers[]
  responses            Response[]

  requestedChats Chat[] @relation("RequesterToChat")
  respondedChats Chat[] @relation("ResponderToChat")
}

model SkillsOnUsers {
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.Uuid
  skill   Skill  @relation(fields: [skillId], references: [id])
  skillId String @db.Uuid

  @@id([userId, skillId])
}

model Role {
  id    String @id @default(uuid()) @db.Uuid
  name  String @unique
  users User[]
}

model Address {
  id        String  @id @default(uuid()) @db.Uuid
  userId    String  @db.Uuid
  latitude  Float
  longitude Float
  zipCode   String
  street    String
  city      String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Preference {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Response {
  id        String @id @default(uuid()) @db.Uuid
  userId    String @db.Uuid
  requestId String @db.Uuid

  user    User    @relation(fields: [userId], references: [id])
  request Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  chat    Chat?
}

model Request {
  id          String             @id @default(uuid()) @db.Uuid
  description String
  deadline    DateTime
  userId      String             @db.Uuid
  skills      SkillsOnRequests[]
  pictures    RequestPicture[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  statusId    String             @db.Uuid

  user      User          @relation(fields: [userId], references: [id], onDelete: NoAction)
  status    RequestStatus @relation(fields: [statusId], references: [id], onDelete: Cascade)
  responses Response[]
  chats     Chat[]
}

model RequestStatus {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique
  code String @unique

  request Request[]
}

model RequestPicture {
  id          String  @id @default(uuid()) @db.Uuid
  picturePath String
  requestId   String  @db.Uuid
  requests    Request @relation(fields: [requestId], references: [id])
}

model SkillsOnRequests {
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId String  @db.Uuid
  skill     Skill   @relation(fields: [skillId], references: [id], onDelete: NoAction)
  skillId   String  @db.Uuid

  @@id([requestId, skillId])
}

model Skill {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique()
  description String
  parentId    String?

  requests SkillsOnRequests[]
  users    SkillsOnUsers[]
}

model FeedBack {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
}

model FeedBackApplication {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
}

model Issue {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
}

model ObjectModel {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
}

model Chat {
  id String @id @default(uuid()) @db.Uuid

  requestId   String @db.Uuid
  responseId  String @unique @db.Uuid
  requesterId String @db.Uuid // ID de l'utilisateur qui a créé la demande
  responderId String @db.Uuid // ID de l'utilisateur qui a répondu à la demande

  request   Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  response  Response  @relation(fields: [responseId], references: [id], onDelete: Cascade)
  messages  Message[]
  requester User      @relation("RequesterToChat", fields: [requesterId], references: [id])
  responder User      @relation("ResponderToChat", fields: [responderId], references: [id])
}

model Message {
  id         String   @id @default(uuid()) @db.Uuid
  content    String
  createdAt  DateTime @default(now())
  senderId   String   @db.Uuid // ID de l'utilisateur qui envoie le message
  receiverId String   @db.Uuid // ID de l'utilisateur qui reçoit le message
  chatId     String   @db.Uuid

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}
